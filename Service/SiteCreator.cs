using System;
using System.Collections.Generic;
using System.Linq;
using Data;
using Data.SiteDataTemplates;
using Helpers;

namespace Service
{
    public static class SiteCreator
    {
        private static string _websiteTitle;

        /// <summary>
        /// Main method for creating website. Calls PreparePage.
        /// </summary>
        /// <param name="template">Data from which page is generated.</param>
        /// <returns>IEnumerable of data to save: path, content.</returns>
        public static IEnumerable<ReturnSiteModel> CreateWebsite(InitialSiteTemplate template)
        {
            try
            {
                var db = PrepareDatabaseData(template.Database);
                _websiteTitle = template.WebsiteName;

                var returnSite = new List<ReturnSiteModel>
                {
                    PreparePage(GenerateNavbar(template.Subpages, true), template.WebsiteName, template.HtmlContent, db, true)
                };

                returnSite.AddRange(template.Subpages.Select(subpage => PreparePage(GenerateNavbar(template.Subpages), subpage.Name, subpage.HtmlContent, db)));

                if (template.HasExternalCss)
                {
                    returnSite.Add(new ReturnSiteModel
                    {
                        FileContent = Resources.CSSTemplate,
                        PathToFile = "styles.css"
                    });
                }

                return returnSite;
            }
            catch (Exception ex)
            {
                LogHelper.LogError($"Error thrown in method {nameof(CreateWebsite)}", ex);
                throw;
            }
        }

        /// <summary>
        /// Prepare page content to save and needed data.
        /// </summary>
        /// <param name="navBar">Navbar template generated by GenerateNavbar method.</param>
        /// <param name="subpageName">String: Name of subpage.</param>
        /// <param name="htmlContent">String: Content which will be rendered after database connection script. Not needed can be optionally added.</param>
        /// <param name="dbReplacement">String: Database connection script.</param>
        /// <param name="isIndex">Boolean: Flag that indicates if page is index.</param>
        /// <returns>ReturnSiteModel that contains data like content, path and flag is subpage.</returns>
        private static ReturnSiteModel PreparePage(string navBar, string subpageName, string htmlContent, string dbReplacement, bool isIndex = false)
        {
            var phpTemplate = Resources.ResourceManager.GetString("PHPTemplate") ?? "";

            try
            {
                phpTemplate = phpTemplate.Replace("##WEBSITE_TITLE##", _websiteTitle);
                phpTemplate = phpTemplate.Replace("##NAVBAR##", navBar.Replace("##WEBSITE_TITLE##", _websiteTitle));
                phpTemplate = phpTemplate.Replace("##HTML_CONTENT##", htmlContent);
                phpTemplate = phpTemplate.Replace("##DB##", dbReplacement);

                return new ReturnSiteModel
                {
                    FileContent = phpTemplate,
                    IsSubpage = !isIndex,
                    PathToFile = isIndex ? "index.php" : $"{ subpageName.Replace(" ", "") }.php"
                };
            }
            catch (Exception ex)
            {
                LogHelper.LogError($"Error thrown in method {nameof(PreparePage)}", ex);
                throw;
            }
        }

        /// <summary>
        /// Prepare database connection script in php. Replace data from template.
        /// </summary>
        /// <param name="template">Data from which page is generated.</param>
        /// <returns>String which contains script to replace in page template.</returns>
        private static string PrepareDatabaseData(DatabaseSiteTemplate template)
        {
            var databaseReplace = Resources.ResourceManager.GetString("DBTemplate") ?? "";

            try
            {
                databaseReplace = databaseReplace.Replace("##DATABASE##", template.DbName);
                databaseReplace = databaseReplace.Replace("##USERNAME##", template.ServerLogin);
                databaseReplace = databaseReplace.Replace("##PASSWORD##", template.ServerPassword);
                databaseReplace = databaseReplace.Replace("##SERVER_NAME##", template.ServerName);

                return databaseReplace;
            }
            catch (Exception ex)
            {
                LogHelper.LogError($"Error thrown in method {nameof(PrepareDatabaseData)}", ex);
                throw;
            }
        }

        /// <summary>
        /// Generates navbar for website.
        /// </summary>
        /// <param name="subpageList">IEnumerable"SubpageTemplate": List containing subpage data.</param>
        /// <param name="isInIndex">Boolean: Flag that indicates if navbar is located in index.</param>
        /// <returns></returns>
        private static string GenerateNavbar(IEnumerable<SubpageTemplate> subpageList, bool isInIndex = false)
        {
            var links = "";

            try
            {
                var phpTemplate = Resources.ResourceManager.GetString(isInIndex ? "PHPLink" : "PHPLinkSubpage");

                foreach (var item in subpageList)
                {
                    links += phpTemplate?.Replace("##PAGE_NAME_URI##", item.Name.Replace(" ", "")).Replace("##PAGE_NAME##", item.Name);
                }

                return Resources.ResourceManager.GetString("PHPNavbar")?.Replace("##LINKS##", links);
            }
            catch (Exception ex)
            {
                LogHelper.LogError($"Error thrown in method {nameof(GenerateNavbar)}", ex);
                throw;
            }
        }
    }
}